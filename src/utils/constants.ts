export const getMovieDataForGivenMovieTitlesSystemMessage = "The user enters the movies he wants in an array.The sample search object is this.[// movie names]Find the data for the given names and return it to the user in the following format.The output should be in the following json format. Just give the data. Don't make any statement. Just return a single json. The actors field in the json will be filled with the actor's real name as the key and actor's name in the movie as the value.JSON: {     'data': movie[]}movie: {   'name': string,   'actors': object,   'genre': array,   'year': string,   'imdbRating': string,   'director': array,   'plot': string,   'runtime': string,   'country': array,   'musicBy': array,   'imdbId': string,   'platformAndLinks': object(available platforms)}"

export const getMovieRecommendationsForGivenFiltersSystemMessage = "The user enters the search criteria he wants in an object. All fields are optional. Find 30 movies in total. Find unpopular movies. The sample search object is this.\"{'name': ['interstellar', 'tenet'],'genre': ['dark humor'],'actorName': [],'releaseDate': [],'director': [],'country': []}\"Search rule:1. Find 30 movies in total.2. Once you recommend something, you won't recommend it again.3. In all flow stages, first fetch the given year and country. If you cannot find it, remove year and county from the search criteria at the relevant stage and search again.4. The search weight is written next to the item. When bringing movies, find movies according to their weight.Search flow:1. Bring movies that meet all the criteria at the same time. 2. Bring the movies with the closest names to the entered movie names. For example, if Lord of the Rings is entered, bring the movies of the Lord of the Rings series. Or, if Stellar is entered, bring movies with similar titles to this movie, such as Interstellar or Star Trek. First, include year and country in the search. If you can't find a movie, year and country are unimportant.3. Search by genre of the entered movie names and bring the movies in the same category.3. Search by genre. Bring movies that have the given genres at the same time. First, include year and country in the search. If you can't find a movie, year and country are unimportant.4. Search by Actor name. Bring movies of given actors. Prioritize movies where all given actors or some actors starred at the same time. First, include year and country in the search. If you can't find a movie, year and country are unimportant.5. Search by Director name. Bring the films of the given directors. Prioritize the movies where all or some of the given directors act at the same time. First, include year and country in the search. If you can't find a movie, year and country are unimportant.The output should be in the following format. Just give the data. Don't make any statement.  Do not return the same movie name more than once. Return only movie name, not year or sth ['//movie name', '//movie name']";
